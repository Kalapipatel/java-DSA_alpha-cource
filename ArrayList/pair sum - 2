Find if any pair in a sorted & rotated ArrayList has a target sum.

List = [11, 15, 6, 8, 9, 10]  target = 16

----------------------------------------------------------------------------

import java.util.*;

class rough1 {

    public static boolean brutForce(ArrayList<Integer> list, int target) {
        // Tc = O(n^2)
        for (int i = 0; i < list.size(); i++) {
            for (int j = i + 1; j < list.size(); j++) {
                if (list.get(i) + list.get(j) == target)
                    return true;
            }
        }
        return false;
    }

    public static boolean optmized(ArrayList<Integer> list, int target) {
        // Tc = O(n)

        int bp = -1;
        int n = list.size();
        for (int i = 0; i < list.size() - 1; i++) {
            if (list.get(i) > list.get(i + 1)) {
                bp = i;
                break;
            }
        }

        int lp = bp + 1; // smallest
        int rp = bp; // largest

        while (lp != rp) {
            if (list.get(lp) + list.get(rp) == target) {
                return true;
            } else if (list.get(lp) + list.get(rp) < target) {
                lp = (lp + 1) % n;
            } else {
                rp = (n + rp - 1) % n;
            }
        }
        return false;

    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        ArrayList<Integer> list = new ArrayList<>();

        list.add(11);
        list.add(15);
        list.add(6);
        list.add(8);
        list.add(9);
        list.add(10);

        int target = 16;

        System.out.println(brutForce(list, target));
        System.out.println(optmized(list, target));

    }
}
