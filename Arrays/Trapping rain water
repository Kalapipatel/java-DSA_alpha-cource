import java.net.spi.InetAddressResolver.LookupPolicy;
import java.util.*;

class rough3{

    public static int trappRainWater(int height[]){
        // calculate left max boundary -> array
        // calculate right maxx boundary -> array

        //loop
        //waterLevel = min(leftmax , rightmax)
        //trapped water = water level - height[i]

        int n = height.length;
        int leftmax[] = new int[n];
        leftmax[0] = height[0];
        for(int i=1; i<n; i++){
            leftmax[i] = Math.max(height[i], leftmax[i-1]);
        }

        int rightmax[] = new int[height.length];
        rightmax[n-1] = height[n-1];
        for(int i=n-2; i>=0; i--){
            leftmax[i] = Math.max(height[i], rightmax[i+1]);
        }

        int trappedwater=0;
        for(int i=0; i<n; i++){
            int waterlevel = Math.min(leftmax[i], rightmax[i]);
            trappedwater += (waterlevel - height[i]);
        }

        return trappedwater;
    }
    public static void main(String[] args) {
        int arr[] = {5,4,3,2,1,0,4};
        int n = arr.length;
        int sum=0;
        
        for(int i=0; i<n; i++){
            int right=arr[i]; int left=arr[i];
            
            for(int j=i+1; j<n; j++ ){
                if(arr[j] > right){
                    right = arr[j];
                }
            }
            for(int k=i-1; k>=0; k--){
                if(arr[k] > left){
                    left = arr[k];
                }
            }

            int wcap = Math.min(right, left);
            int storage = wcap - arr[i];
            
            sum += storage;
        }
        System.out.println("the capacity of the storage is : " +  sum);
    }
}
